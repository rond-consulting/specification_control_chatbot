Index: main.py
===================================================================
diff --git a/main.py b/main.py
--- a/main.py	(revision 7d8c4f1e1f56ed9b321029c2a8ff123bac8307d2)
+++ b/main.py	(date 1730728314136)
@@ -1,0 +1,18 @@
+#url = "https://www.gamma.nl/assortiment/bosch-18v-decoupeerzaag-pst18-zonder-accu/p/B391153"
+
+from specification_scrape import scrape_specifications
+import pandas as pd
+from asking_chatgpt import check_specs, extract_data_dict_from_markdown
+
+url = "https://www.gamma.nl/assortiment/bosch-18v-decoupeerzaag-pst18-zonder-accu/p/B391153"
+df_to_check = pd.read_csv("data/incorrect_specs.csv")
+markdown_file = 'corrected_specs_summary.md'
+
+def main():
+    scrape_specifications(url)
+    check_specs(df_to_check)
+    extract_data_dict_from_markdown(markdown_file)
+
+
+if __name__ == "__main__":
+    main()
Index: ChatGPT/gamma_scrape.py
===================================================================
diff --git a/ChatGPT/gamma_scrape.py b/ChatGPT/gamma_scrape.py
--- a/ChatGPT/gamma_scrape.py	(revision 7d8c4f1e1f56ed9b321029c2a8ff123bac8307d2)
+++ b/ChatGPT/gamma_scrape.py	(date 1730718255249)
@@ -1,0 +1,57 @@
+import requests
+from bs4 import BeautifulSoup
+import pandas as pd
+import json
+
+# URL of the product page
+url = "https://www.gamma.nl/assortiment/bosch-18v-decoupeerzaag-pst18-zonder-accu/p/B391153"
+
+# Send a request to the webpage
+response = requests.get(url)
+response.raise_for_status()  # Check if the request was successful
+
+# Parse the HTML content
+soup = BeautifulSoup(response.text, 'html.parser')
+
+# Extract specifications under the "Specificaties" header
+specifications = {}
+
+# Find the specifications section
+spec_section = soup.find("div", {"id": "product-specifications"})
+
+if spec_section:
+    # Extract each specification
+    for row in spec_section.find_all("tr"):
+        # Each row should contain a label and a value
+        label_cell = row.find("th")
+        value_cell = row.find("td")
+
+        # Check if both label and value exist
+        if label_cell and value_cell:
+            label = label_cell.get_text(strip=True)
+            value = value_cell.get_text(strip=True)
+            specifications[label] = value
+
+    # Retrieve the EAN number to use as the main name
+    ean_number = specifications.get("EAN", "unknown")
+
+    # Save specifications as a DataFrame
+    df = pd.DataFrame([specifications], index=[ean_number])
+    print("DataFrame:")
+    print(df)
+
+    # Save DataFrame to CSV (optional)
+    df.to_csv(f"../data/specifications.csv", index=False)
+
+    # Save specifications as JSON with EAN as the main name
+    with open(f"../data/specifications.json", "w") as json_file:
+        json.dump({ean_number: specifications}, json_file, indent=4)
+
+    print(
+        f"Specifications saved as {ean_number}_specifications.csv and {ean_number}_specifications.json")
+else:
+    print("Specifications section not found on the page.")
+
+
+df_bosch = pd.read_csv('../data/4053423225952_specifications.csv')
+print(df_bosch.head())
\ No newline at end of file
Index: ChatGPT/.env
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>api_key_axians_laptop = \"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\"\r\napi_key_personal_laptop = \"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\"\r\ntesting_axians_gamma = \"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\"\r\nworking_api =
===================================================================
diff --git a/ChatGPT/.env b/ChatGPT/.env
--- a/ChatGPT/.env	(revision 7d8c4f1e1f56ed9b321029c2a8ff123bac8307d2)
+++ b/ChatGPT/.env	(date 1730714786596)
@@ -1,4 +1,4 @@
-api_key_axians_laptop = "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"
-api_key_personal_laptop = "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"
-testing_axians_gamma = "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"
-working_api =
\ No newline at end of file
+#api_key_axians_laptop = "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"
+#api_key_personal_laptop = "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"
+#testing_axians_gamma = "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"
+working_api = "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"
Index: ChatGPT/ean_on_gpt.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># THIS WORKS!\r\n# %%\r\n# packages importing\r\nimport pandas as pd\r\nimport requests\r\nfrom openai import OpenAI\r\nfrom bs4 import BeautifulSoup\r\n\r\n# %%\r\ndf_gamma = pd.read_csv('../data/4053423225952_specifications.csv')\r\nspec_names = df_gamma.columns\r\nspecs = df_gamma\r\nprint(\"-------------------------\")\r\nprint(spec_names, \"\\nEAN is\", df_gamma['EAN'][0])\r\nprint(\"-------------------------\")\r\n\r\n# %%\r\n\r\n#print(df_gamma)\r\n\r\n\r\n# Set up prompt for ChatGPT\r\nprompt = f\"\"\"\r\nWhat can you tell me about the EAN named as {df_gamma['EAN'][0]}?\r\nYou can check if its attributes are correct at attributes at:{df_gamma.to_markdown()}\r\nSpecifically, can you make a bulletpoint of how many of the specifications I provide are correct and how many are wrong?\r\n\r\nCould you also tell me what percentage of information I provided is correct? \r\n\r\nFor instance if I gave 20 specifications and 16 of them are correct can you say:\r\n- From the information you gave 80% is correct!\r\n\r\n\"\"\"\r\n\r\n# print(prompt)\r\n#\r\n# # Connect to ChatGPT with the new API call\r\n# response = OpenAI.ChatCompletion.create(\r\n#     model='gpt-4',  # Adjust model if needed\r\n#     messages=[\r\n#         {'role': 'system', 'content': 'You are a football scout'},\r\n#         {'role': 'user', 'content': prompt}\r\n#     ]\r\n# )\r\n#\r\n# print(response['choices'][0]['message']['content'])\r\n\r\nclient = OpenAI(api_key=\"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\")\r\n\r\nmodel = 'gpt-4o'\r\ntemperature = 0.7\r\nmax_tokens = 1000\r\n\r\nmessages = [\r\n    {'role': 'system', 'content': 'you are a helpful assistant'},\r\n    {'role': 'user', 'content': prompt}\r\n]\r\n\r\n# helper function\r\ndef get_summary():\r\n    completion = client.chat.completions.create(\r\n        model = model,\r\n        messages = messages,\r\n        temperature = temperature,\r\n        max_tokens = max_tokens\r\n    )\r\n    return completion.choices[0].message.content\r\n\r\nprint(get_summary())
===================================================================
diff --git a/ChatGPT/ean_on_gpt.py b/ChatGPT/ean_on_gpt.py
--- a/ChatGPT/ean_on_gpt.py	(revision 7d8c4f1e1f56ed9b321029c2a8ff123bac8307d2)
+++ b/ChatGPT/ean_on_gpt.py	(date 1730719795702)
@@ -2,35 +2,45 @@
 # %%
 # packages importing
 import pandas as pd
-import requests
-from openai import OpenAI
-from bs4 import BeautifulSoup
+from openai import OpenAI, api_key
+from dotenv import load_dotenv, find_dotenv
+import os
+import prompts
 
 # %%
-df_gamma = pd.read_csv('../data/4053423225952_specifications.csv')
+
+gamma_data = r"C:\Users\baran.metin\Documents\Projects\Intergamma\ean_check\data\4053423225952_specifications.csv"
+df_gamma = pd.read_csv(gamma_data)
 spec_names = df_gamma.columns
 specs = df_gamma
 print("-------------------------")
-print(spec_names, "\nEAN is", df_gamma['EAN'][0])
+print(f"Specifications are {spec_names.tolist()}", f"\nEAN is {df_gamma['EAN'][0]}")
 print("-------------------------")
 
+print(df_gamma.head())
 # %%
 
 #print(df_gamma)
 
 
+_ = load_dotenv(find_dotenv())
+client = OpenAI(api_key=os.environ.get('working_api'))
+print(f"API key is {api_key}")
+
+print('Report Starts')
+
 # Set up prompt for ChatGPT
-prompt = f"""
-What can you tell me about the EAN named as {df_gamma['EAN'][0]}?
-You can check if its attributes are correct at attributes at:{df_gamma.to_markdown()}
-Specifically, can you make a bulletpoint of how many of the specifications I provide are correct and how many are wrong?
-
-Could you also tell me what percentage of information I provided is correct? 
-
-For instance if I gave 20 specifications and 16 of them are correct can you say:
-- From the information you gave 80% is correct!
-
-"""
+# prompt = f"""
+# What can you tell me about the EAN named as {df_gamma['EAN'][0]}?
+# You can check if its attributes are correct at attributes at:{df_gamma.to_markdown()}
+# Specifically, can you make a bulletpoint of how many of the specifications I provide are correct and how many are wrong?
+#
+# Could you also tell me what percentage of information I provided is correct?
+#
+# For instance if I gave 20 specifications and 16 of them are correct can you say:
+# - From the information you gave 80% is correct!
+#
+# """
 
 # print(prompt)
 #
@@ -45,15 +55,22 @@
 #
 # print(response['choices'][0]['message']['content'])
 
-client = OpenAI(api_key="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")
+#client = OpenAI(api_key="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")
+
+
+system_message = prompts.system_message
+
+# Activate the prompt below when it's fine-tuned
+#prompt = prompts.generate_prompt(df_gamma)
+prompt_2 = prompts.generate_prompt_2(df_gamma)
 
 model = 'gpt-4o'
 temperature = 0.7
 max_tokens = 1000
 
 messages = [
-    {'role': 'system', 'content': 'you are a helpful assistant'},
-    {'role': 'user', 'content': prompt}
+    {'role': 'system', 'content': system_message},
+    {'role': 'user', 'content': prompt_2}
 ]
 
 # helper function
@@ -66,4 +83,6 @@
     )
     return completion.choices[0].message.content
 
-print(get_summary())
\ No newline at end of file
+print(get_summary())
+
+print("Report Finishes!")
\ No newline at end of file
Index: .env
===================================================================
diff --git a/.env b/.env
--- a/.env	(revision 7d8c4f1e1f56ed9b321029c2a8ff123bac8307d2)
+++ b/.env	(date 1730718813329)
@@ -1,0 +1,4 @@
+#api_key_axians_laptop = "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"
+#api_key_personal_laptop = "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"
+#testing_axians_gamma = "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"
+working_api = "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"
Index: specification_scrape.py
===================================================================
diff --git a/specification_scrape.py b/specification_scrape.py
--- a/specification_scrape.py	(revision 7d8c4f1e1f56ed9b321029c2a8ff123bac8307d2)
+++ b/specification_scrape.py	(date 1730728079869)
@@ -1,0 +1,52 @@
+# The function to scrape the information from given website
+
+import requests
+from bs4 import BeautifulSoup
+import pandas as pd
+import json
+
+def scrape_specifications(url: str):
+    # URL of the product page
+
+    # Send a request to the webpage
+    response = requests.get(url)
+    response.raise_for_status()  # Check if the request was successful
+
+    # Parse the HTML content
+    soup = BeautifulSoup(response.text, 'html.parser')
+
+    # Extract specifications under the "Specificaties" header
+    specifications = {}
+
+    # Find the specifications section
+    spec_section = soup.find("div", {"id": "product-specifications"})
+
+    if spec_section:
+        # Extract each specification
+        for row in spec_section.find_all("tr"):
+            # Each row should contain a label and a value
+            label_cell = row.find("th")
+            value_cell = row.find("td")
+
+            # Check if both label and value exist
+            if label_cell and value_cell:
+                label = label_cell.get_text(strip=True)
+                value = value_cell.get_text(strip=True)
+                specifications[label] = value
+
+        # Retrieve the EAN number to use as the main name
+        ean_number = specifications.get("EAN", "unknown")
+
+        # Save specifications as a DataFrame
+        df = pd.DataFrame([specifications], index=[ean_number])
+        print("DataFrame:")
+        print(df)
+
+        # Save DataFrame to CSV (optional)
+        df.to_csv("data/incorrect_specs.csv", index=False)
+
+    else:
+        print("Specifications section not found on the page.")
+
+url = "https://www.gamma.nl/assortiment/bosch-18v-decoupeerzaag-pst18-zonder-accu/p/B391153"
+scrape_specifications(url)
\ No newline at end of file
Index: webapp_trial.py
===================================================================
diff --git a/webapp_trial.py b/webapp_trial.py
--- a/webapp_trial.py	(revision 7d8c4f1e1f56ed9b321029c2a8ff123bac8307d2)
+++ b/webapp_trial.py	(date 1730721576651)
@@ -1,0 +1,45 @@
+import pandas as pd
+from openai import OpenAI
+import gradio as gr
+import prompts
+
+system_message = prompts.system_message
+
+client = OpenAI(api_key="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")
+messages = [
+    {'role': 'system', 'content': system_message}
+]
+
+def webapp_ean(user_input):
+    messages.append({'role': 'user', 'content': user_input})
+    model = 'gpt-3.5-turbo'
+    temperature = 0.7
+    max_tokens = 1000
+
+    # Construct the prompt
+    prompt = f"""
+    What can you tell me about the EAN named as {user_input}?
+
+    Specifically, can you make a list with bullet points of how many of the specifications does this EAN have?
+    """
+
+    # Append the prompt to the messages
+    messages.append({'role': 'assistant', 'content': prompt})
+
+    # Call the OpenAI API
+    response = client.chat.completions.create(
+        model=model,
+        messages=messages,
+        max_tokens=max_tokens,
+        temperature=temperature
+    )
+
+    # Correctly access the content from the response
+    ChatGPT_reply = response.choices[0].message.content  # Access content directly
+    messages.append({'role': 'assistant', 'content': ChatGPT_reply})  # Store the reply
+
+    return ChatGPT_reply
+
+demo = gr.Interface(fn=webapp_ean, inputs='text', outputs='text', title='EAN Check')
+
+demo.launch()
Index: ChatGPT/prompts.py
===================================================================
diff --git a/ChatGPT/prompts.py b/ChatGPT/prompts.py
--- a/ChatGPT/prompts.py	(revision 7d8c4f1e1f56ed9b321029c2a8ff123bac8307d2)
+++ b/ChatGPT/prompts.py	(date 1730720225591)
@@ -1,0 +1,55 @@
+system_message = """
+You are an expert on evaluating the specifications of products via their EANs.
+You work in production chains and you test if the specifications of a product on a given dataframe is correct or not.
+Your primary goal for today is to assist in checking if the information I give you is true or not.
+As a result, I need the results to be given back in a DataFrame format.
+Furthermore, I need you to calculate how much of the information I give you is correct.
+It is important that you check the product's information primarily on its official website. So for example if I provide you a Bosch UniversalSaw, please check it primarily on Bosch website.
+
+"""
+
+
+def generate_prompt(df):
+    prompt = f"""
+    As the evaluator of the {df['EAN']} specifications, I ask your assistance to help me get a detailed report whether my dataframe has correct or incorrect information.
+
+    Here is the dataframe: {df}
+
+    ---
+
+    Some information about the dataframe:
+    - The main key is the European Article Number (EAN). This can be found under {df['EAN']}
+    - Every column name is a specification of the product except for 'Productnummer' and 'EAN'
+    - The column names are in Dutch
+    - The values in cells might include the unit of the measurement; i.e. Gewicht product might have 8 kg as value and kg here refers to kilogram
+
+    The goal of this project:
+    - I need you to check if the specifications information I provide is correct
+    - Please provide your response in markdown format
+
+
+
+"""
+    return prompt
+
+
+# - Please also print a dataframe with the following structure: column names: 'Specification', 'Provided_Specs', 'Actual_Specs', 'is_correct'
+#     - The values of the dataframe should be the specification name under 'Specification', the value from the dataframe I provide for 'Provided_Specs', the value that you found to be correct under 'Actual_Specs' and the final verdict if the information is correct or incorrect as booelean under 'is_correct' (True of Correct)
+#
+
+def generate_prompt_2(df):
+    prompt = f"""
+    I will ask you to check the specifications of a product for me. can you help with it?
+    The product EAN is {df['EAN']}
+    The specifications can be found in {df.columns}
+    The information is in Dutch language but you can search in any website.
+
+    Please share with me your findings in markdown format.
+    Please add for every specification, the value you found and whether the information I provided matches the correct one that you found.
+    Please check all the specifications I provide at {df}
+    Can you provide your answer on which aspects are incorrect and an overall correct percentage? 
+    For instance if I gave 20 specifications and 16 of them are correct can you say:
+    - From the information you gave 80% is correct!
+
+"""
+    return prompt
\ No newline at end of file
Index: asking_chatgpt.py
===================================================================
diff --git a/asking_chatgpt.py b/asking_chatgpt.py
--- a/asking_chatgpt.py	(revision 7d8c4f1e1f56ed9b321029c2a8ff123bac8307d2)
+++ b/asking_chatgpt.py	(date 1730728283024)
@@ -1,0 +1,97 @@
+# THIS WORKS!
+# %%
+# packages importing
+from openai import OpenAI
+import prompts
+import markdown
+import pandas as pd
+import re
+
+
+
+def check_specs(df):
+
+
+    ean = df['EAN'][0]
+    # Set up prompt for ChatGPT
+    prompt = f"""
+
+    What can you tell me about the EAN named as {ean}?
+    
+    Can you please give me the correct values of the specifications for the following specs: {df.columns}
+    You can check if its attributes are correct at attributes at:
+    {df.to_markdown()}
+
+    Please give the results in a dataframe illustration with 'data' as the variable name and key value pairs as specifications and their respective values. The variable name needs to be 'data'
+
+"""
+
+
+    #client = OpenAI(api_key=os.environ.get('working_api'))
+    client = OpenAI(api_key="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")
+
+    system_message = prompts.system_message
+
+
+    model = 'gpt-4o-mini'
+    temperature = 0.7
+    max_tokens = 1000
+
+    messages = [
+        {'role': 'system', 'content': system_message},
+        {'role': 'user', 'content': prompt}
+    ]
+
+    # helper function
+    def get_summary():
+        # ean = ean,
+        completion = client.chat.completions.create(
+            model=model,
+            messages=messages,
+            temperature=temperature,
+            max_tokens=max_tokens
+        )
+        return completion.choices[0].message.content
+
+    # Fetch the summary with corrections in markdown format
+    summary = get_summary()
+
+    # Ensure the summary is markdown-formatted by adding headers if necessary
+    markdown_content = "### Corrected Specifications Summary\n\n" + summary
+
+    # Save the markdown response to a .md file
+    with open("corrected_specs_summary.md", "w", encoding="utf-8") as file:
+        file.write(markdown_content)
+
+    print(f"To do this job I used {model} as the base model")
+    print("Markdown summary saved as 'corrected_specs_summary.md'")
+    print(summary)
+
+    return summary
+
+df = pd.read_csv("data/incorrect_specs.csv")
+check_specs(df)
+
+
+def extract_data_dict_from_markdown(file_path):
+    # Step 1: Read the markdown file
+    with open(file_path, 'r', encoding='utf-8') as file:
+        md_content = file.read()
+
+    # Step 2: Extract the data dictionary using regex
+    md_file_clean = re.search(r"data\s*=\s*pd\.DataFrame\s*\(\s*\{(.+?)\}\s*\)", md_content, re.DOTALL)
+
+    if md_file_clean:
+        # Extract the matched content and strip leading/trailing whitespace
+        data_dict_str = md_file_clean.group(1).strip()
+
+        # Step 3: Evaluate the string to convert it to a dictionary
+        data_dict = eval('{' + data_dict_str + '}')  # Evaluate the extracted dictionary string
+
+        # Convert the dictionary to a DataFrame
+        correct_df = pd.DataFrame(data_dict)
+
+        correct_df.to_csv(f"data/correct_specs.csv", index=False)
+
+md_file = 'corrected_specs_summary.md'
+extract_data_dict_from_markdown(md_file)
\ No newline at end of file
